import { collection, addDoc, Timestamp } from 'firebase/firestore';
import { db } from '../config/firebase';

// Fun√ß√£o para gerar UUID v4
function generateUUID(): string {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

// Interface para o documento de c√≥digo
interface VerificationCodeDoc {
  code: string;
  isUsed: boolean;
  usedBy?: string;
  usedAt?: Timestamp;
  createdAt: Timestamp;
}

// Fun√ß√£o para popular a cole√ß√£o com c√≥digos
export const populateVerificationCodes = async (quantity: number = 50): Promise<void> => {
  try {
    console.log(`üöÄ Iniciando cria√ß√£o de ${quantity} c√≥digos de verifica√ß√£o...`);
    
    const codesRef = collection(db, 'users_codes');
    const codes: VerificationCodeDoc[] = [];
    
    // Gerar c√≥digos √∫nicos
    const generatedCodes = new Set<string>();
    
    while (generatedCodes.size < quantity) {
      const code = generateUUID();
      generatedCodes.add(code);
    }
    
    // Preparar documentos para inser√ß√£o
    const now = Timestamp.now();
    const codesArray = Array.from(generatedCodes);
    for (const code of codesArray) {
      codes.push({
        code: code,
        isUsed: false,
        createdAt: now
      });
    }
    
    // Inserir c√≥digos em lotes (Firebase permite at√© 500 por lote)
    const batchSize = 500;
    const batches = [];
    
    for (let i = 0; i < codes.length; i += batchSize) {
      const batch = codes.slice(i, i + batchSize);
      batches.push(batch);
    }
    
    let totalInserted = 0;
    
    for (const batch of batches) {
      const promises = batch.map(codeDoc => addDoc(codesRef, codeDoc));
      await Promise.all(promises);
      totalInserted += batch.length;
      console.log(`‚úÖ Lote inserido: ${totalInserted}/${quantity} c√≥digos`);
    }
    
    console.log(`üéâ Sucesso! ${totalInserted} c√≥digos de verifica√ß√£o foram criados na cole√ß√£o 'users_codes'`);
    console.log('üìã C√≥digos gerados:');
    
    // Mostrar alguns exemplos dos c√≥digos criados
    const sampleCodes = Array.from(generatedCodes).slice(0, 5);
    sampleCodes.forEach((code, index) => {
      console.log(`   ${index + 1}. ${code}`);
    });
    
    if (generatedCodes.size > 5) {
      console.log(`   ... e mais ${generatedCodes.size - 5} c√≥digos`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao criar c√≥digos de verifica√ß√£o:', error);
    throw error;
  }
};

// Fun√ß√£o para limpar todos os c√≥digos (cuidado!)
export const clearAllVerificationCodes = async (): Promise<void> => {
  try {
    console.log('‚ö†Ô∏è  ATEN√á√ÉO: Esta fun√ß√£o ir√° deletar TODOS os c√≥digos da cole√ß√£o users_codes!');
    console.log('Para usar esta fun√ß√£o, descomente o c√≥digo abaixo e execute manualmente.');
    
    // Descomente as linhas abaixo se quiser usar esta fun√ß√£o
    /*
    const codesRef = collection(db, 'users_codes');
    const querySnapshot = await getDocs(codesRef);
    
    const deletePromises = querySnapshot.docs.map(doc => deleteDoc(doc.ref));
    await Promise.all(deletePromises);
    
    console.log('üóëÔ∏è  Todos os c√≥digos foram removidos da cole√ß√£o users_codes');
    */
  } catch (error) {
    console.error('‚ùå Erro ao limpar c√≥digos:', error);
    throw error;
  }
};

// Fun√ß√£o para listar c√≥digos existentes
export const listVerificationCodes = async (): Promise<void> => {
  try {
    const { collection, getDocs } = await import('firebase/firestore');
    const codesRef = collection(db, 'users_codes');
    const querySnapshot = await getDocs(codesRef);
    
    console.log(`üìä Total de c√≥digos na cole√ß√£o: ${querySnapshot.size}`);
    
    if (querySnapshot.size > 0) {
      console.log('üìã C√≥digos existentes:');
      querySnapshot.docs.forEach((doc, index) => {
        const data = doc.data();
        const status = data.isUsed ? 'üî¥ USADO' : 'üü¢ DISPON√çVEL';
        console.log(`   ${index + 1}. ${data.code} - ${status}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao listar c√≥digos:', error);
    throw error;
  }
};
