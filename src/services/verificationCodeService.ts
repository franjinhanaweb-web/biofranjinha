import { doc, updateDoc, query, where, collection, getDocs } from 'firebase/firestore';
import { db } from '../config/firebase';

export interface VerificationCode {
  id: string;
  code: string;
  isUsed: boolean;
}

export interface CodeValidationResult {
  isValid: boolean;
  isUsed: boolean;
  message: string;
  codeData?: VerificationCode;
}

// Validar se um c√≥digo existe e est√° dispon√≠vel
export const validateVerificationCode = async (code: string): Promise<CodeValidationResult> => {
  try {
    // Validar formato UUID (36 caracteres com h√≠fens)
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    if (!code || code.length !== 36 || !uuidRegex.test(code)) {
      return {
        isValid: false,
        isUsed: false,
        message: 'C√≥digo deve ter formato UUID v√°lido (36 caracteres)'
      };
    }

    // Buscar o c√≥digo na cole√ß√£o users_codes
    const codesRef = collection(db, 'users_codes');
    const q = query(codesRef, where('code', '==', code));
    const querySnapshot = await getDocs(q);

    if (querySnapshot.empty) {
      return {
        isValid: false,
        isUsed: false,
        message: 'C√≥digo de verifica√ß√£o n√£o encontrado no banco de dados'
      };
    }

    const codeDoc = querySnapshot.docs[0];
    const codeData = { id: codeDoc.id, ...codeDoc.data() } as VerificationCode;

    // Debug: Log dos dados do c√≥digo
    console.log('üîç Dados do c√≥digo encontrado:', {
      id: codeData.id,
      code: codeData.code,
      isUsed: codeData.isUsed,
      tipo: typeof codeData.isUsed
    });

    if (codeData.isUsed) {
      console.log('‚ùå C√≥digo marcado como usado:', codeData);
      return {
        isValid: false,
        isUsed: true,
        message: 'Este c√≥digo j√° foi utilizado',
        codeData
      };
    }

    return {
      isValid: true,
      isUsed: false,
      message: 'C√≥digo v√°lido e pronto para uso',
      codeData
    };

  } catch (error) {
    console.error('Erro ao validar c√≥digo:', error);
    return {
      isValid: false,
      isUsed: false,
      message: 'Erro ao validar c√≥digo. Tente novamente.'
    };
  }
};

// Marcar c√≥digo como usado
export const markCodeAsUsed = async (codeId: string, userId: string): Promise<void> => {
  try {
    const codeRef = doc(db, 'users_codes', codeId);
    await updateDoc(codeRef, {
      isUsed: true
    });
    console.log('C√≥digo marcado como usado com sucesso');
  } catch (error) {
    console.error('Erro ao marcar c√≥digo como usado:', error);
    throw new Error('Erro ao processar c√≥digo de verifica√ß√£o');
  }
};

