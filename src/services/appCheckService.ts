import { initializeAppCheck, ReCaptchaV3Provider } from 'firebase/app-check';
import app from '../config/firebase';

// Configura√ß√£o do App Check
export const initializeAppCheckService = () => {
  try {
    // Verificar se App Check est√° desabilitado via vari√°vel de ambiente
    if (process.env.REACT_APP_DISABLE_APP_CHECK === 'true') {
      console.log('üîß App Check desabilitado via REACT_APP_DISABLE_APP_CHECK');
      return null;
    }

    // Verificar se estamos em produ√ß√£o
    if (process.env.NODE_ENV === 'production') {
      // Tentar diferentes nomes de vari√°veis de ambiente
      const siteKey = process.env.REACT_APP_FIREBASE_APP_CHECK_SITE_KEY || 
                     process.env.REACT_APP_RECAPTCHA_SITE_KEY ||
                     process.env.RECAPTCHA_SITE_KEY;
      
      if (!siteKey) {
        console.warn('‚ö†Ô∏è App Check n√£o configurado: Site key do reCAPTCHA n√£o encontrada');
        console.warn('Verifique se REACT_APP_RECAPTCHA_SITE_KEY est√° configurada nas vari√°veis de ambiente');
        console.warn('Vari√°veis dispon√≠veis:', {
          'REACT_APP_FIREBASE_APP_CHECK_SITE_KEY': !!process.env.REACT_APP_FIREBASE_APP_CHECK_SITE_KEY,
          'REACT_APP_RECAPTCHA_SITE_KEY': !!process.env.REACT_APP_RECAPTCHA_SITE_KEY,
          'RECAPTCHA_SITE_KEY': !!process.env.RECAPTCHA_SITE_KEY
        });
        return;
      }

      console.log('üîë Site key detectada:', siteKey.substring(0, 10) + '...');

      // Inicializar App Check com reCAPTCHA v3
      const appCheck = initializeAppCheck(app, {
        provider: new ReCaptchaV3Provider(siteKey),
        isTokenAutoRefreshEnabled: true
      });

      console.log('‚úÖ App Check inicializado com reCAPTCHA v3');
      
      // Verificar se o App Check est√° funcionando
      setTimeout(async () => {
        console.log('üîç Verificando status do App Check...');
        
        try {
          // Tentar obter um token do App Check
          const { getToken } = await import('firebase/app-check');
          const token = await getToken(appCheck);
          console.log('‚úÖ Token do App Check obtido com sucesso:', token.token.substring(0, 20) + '...');
        } catch (error) {
          console.error('‚ùå Erro ao obter token do App Check:', error);
          console.log('üí° Se houver erros 400, verifique:');
          console.log('   1. Site key est√° correta no Firebase Console?');
          console.log('   2. reCAPTCHA v3 est√° configurado para este dom√≠nio?');
          console.log('   3. App Check est√° habilitado no Firebase?');
          console.log('   4. Para desabilitar temporariamente: REACT_APP_DISABLE_APP_CHECK=true');
        }
      }, 2000);

      return appCheck;
    } else {
      console.log('üîß App Check desabilitado em desenvolvimento');
      return null;
    }
  } catch (error) {
    console.error('‚ùå Erro ao inicializar App Check:', error);
    return null;
  }
};

// Verificar se App Check est√° ativo
export const isAppCheckEnabled = (): boolean => {
  const siteKey = process.env.REACT_APP_FIREBASE_APP_CHECK_SITE_KEY || 
                 process.env.REACT_APP_RECAPTCHA_SITE_KEY ||
                 process.env.RECAPTCHA_SITE_KEY;
  
  return process.env.NODE_ENV === 'production' && !!siteKey;
};

// Configura√ß√µes do App Check
export const APP_CHECK_CONFIG = {
  // Site key do reCAPTCHA v3 (configurar no Firebase Console)
  SITE_KEY: process.env.REACT_APP_FIREBASE_APP_CHECK_SITE_KEY || 
            process.env.REACT_APP_RECAPTCHA_SITE_KEY ||
            process.env.RECAPTCHA_SITE_KEY,
  
  // Configura√ß√µes de seguran√ßa
  SECURITY: {
    // For√ßar App Check em todas as opera√ß√µes
    ENFORCE: true,
    
    // Auto-refresh do token
    AUTO_REFRESH: true,
    
    // Timeout para valida√ß√£o
    TIMEOUT: 10000
  }
};
